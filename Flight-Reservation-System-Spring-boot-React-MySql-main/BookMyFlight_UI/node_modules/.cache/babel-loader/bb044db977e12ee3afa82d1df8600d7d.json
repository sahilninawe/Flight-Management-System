{"ast":null,"code":"import axios from \"axios\";\n/**\n * @author Vikrant\n * Using Axios library to send request to spring boot and fetch response\n * The service method handles operations for user\n */\n\nexport default class UserService {\n  constructor() {\n    this.uri = \"http://localhost:8980/\";\n  } // Service method to register new user\n\n\n  async addUser(user) {\n    return await axios.post(this.uri + \"/createuser\", user).then(response => {\n      return response;\n    });\n  }\n\n  getUsers() {\n    return this.users;\n  } // Service method to authenticate user\n\n\n  async validateUser(username, password) {\n    return await axios.get(this.uri + \"/auth/\" + username + \"/\" + password).then(res => {\n      console.log(res);\n      console.log(res.data);\n      return res;\n    });\n    ;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/2317565/OneDrive - Cognizant/Desktop/FMS/Flight-Reservation-System-Spring-boot-React-MySql-main/BookMyFlight_UI/src/services/UserService.js"],"names":["axios","UserService","constructor","uri","addUser","user","post","then","response","getUsers","users","validateUser","username","password","get","res","console","log","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,CAAiB;AAE5BC,EAAAA,WAAW,GAAE;AACT,SAAKC,GAAL,GAAS,wBAAT;AAEH,GAL2B,CAO5B;;;AACa,QAAPC,OAAO,CAACC,IAAD,EAAM;AACf,WAAO,MAAML,KAAK,CAACM,IAAN,CAAW,KAAKH,GAAL,GAAS,aAApB,EAAkCE,IAAlC,EAAwCE,IAAxC,CAA6CC,QAAQ,IAAE;AAChE,aAAOA,QAAP;AACH,KAFY,CAAb;AAGH;;AAGDC,EAAAA,QAAQ,GAAE;AACN,WAAO,KAAKC,KAAZ;AACH,GAjB2B,CAmB5B;;;AACkB,QAAZC,YAAY,CAACC,QAAD,EAAUC,QAAV,EAAmB;AACjC,WAAO,MAAMb,KAAK,CAACc,GAAN,CAAU,KAAKX,GAAL,GAAS,QAAT,GAAkBS,QAAlB,GAA2B,GAA3B,GAA+BC,QAAzC,EAAmDN,IAAnD,CAAwDQ,GAAG,IAAE;AACtEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACA,aAAOH,GAAP;AACH,KAJY,CAAb;AAIG;AACN;;AA1B2B","sourcesContent":["import axios from \"axios\";\n\n/**\n * @author Vikrant\n * Using Axios library to send request to spring boot and fetch response\n * The service method handles operations for user\n */\nexport default class UserService{\n\n    constructor(){\n        this.uri=\"http://localhost:8980/\";\n       \n    }\n\n    // Service method to register new user\n    async addUser(user){\n        return await axios.post(this.uri+\"/createuser\",user).then(response=>{\n            return response;\n        });\n    }\n\n    \n    getUsers(){\n        return this.users;\n    }\n\n    // Service method to authenticate user\n    async validateUser(username,password){\n        return await axios.get(this.uri+\"/auth/\"+username+\"/\"+password).then(res=>{\n            console.log(res);\n            console.log(res.data);\n            return res;\n        });;\n    }\n}"]},"metadata":{},"sourceType":"module"}