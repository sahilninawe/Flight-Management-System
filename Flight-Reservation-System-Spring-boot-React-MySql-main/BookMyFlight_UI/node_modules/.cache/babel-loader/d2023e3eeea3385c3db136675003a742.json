{"ast":null,"code":"/**\n * @author Vikrant\n * Using inbuilt fetch API to send request to spring boot and fetch response\n * The service method handles CRUD opertion\n */\nexport default class FlightServiceRest {\n  constructor() {\n    this.uri = \"http://localhost:8980/flight\";\n    this.flights = [];\n  }\n\n  // Service method to fetch all flights\n  async getFlights() {\n    return await fetch(this.uri + \"/fetchall\").then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"flights data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n\n  // Service method to Add a new flight in the database\n  async saveFlight(flight) {\n    return await fetch(this.uri + \"/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(flight)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n      return response.json();\n    }).catch(error => {\n      console.log(error.message);\n    });\n  }\n\n  // Service method to make changes in an existing flight\n  async updateFlight(flight) {\n    return await fetch(this.uri + \"/update\", {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(flight)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n\n  // Service method to remove flight from database\n  async deleteFlight(fid) {\n    return await fetch(this.uri + \"/remove/\" + fid, {\n      method: \"DELETE\",\n      mode: \"cors\"\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n\n  // Service method to fetch flights on source, Destination and Date\n  async getFlightsForUser(source, destination, date) {\n    return await fetch(this.uri + `/fetch?source=${source}&destination=${destination}&date=${date}`).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"flights data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n}","map":{"version":3,"names":["FlightServiceRest","constructor","uri","flights","getFlights","fetch","then","response","ok","handleResponseError","json","data","console","log","catch","error","message","saveFlight","flight","method","mode","headers","body","JSON","stringify","updateFlight","deleteFlight","fid","getFlightsForUser","source","destination","date"],"sources":["C:/Users/2317565/OneDrive - Cognizant/Desktop/FMS/Flight-Reservation-System-Spring-boot-React-MySql-main/BookMyFlight_UI/src/services/FlightServiceRest.js"],"sourcesContent":["/**\n * @author Vikrant\n * Using inbuilt fetch API to send request to spring boot and fetch response\n * The service method handles CRUD opertion\n */\nexport default class FlightServiceRest{\n    constructor(){\n        this.uri = \"http://localhost:8980/flight\";\n        this.flights = [];\n    }\n\n    // Service method to fetch all flights\n    async getFlights() {\n        return await fetch(this.uri + \"/fetchall\").then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"flights data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n\n   // Service method to Add a new flight in the database\n   async saveFlight(flight) {\n        return await fetch(this.uri+\"/add\", {\n            method:\"POST\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(flight)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(error.message);\n        });\n    }\n\n    // Service method to make changes in an existing flight\n    async updateFlight(flight){\n        return await fetch(this.uri+\"/update\", {\n            method:\"PUT\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(flight)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        });\n    }\n\n    // Service method to remove flight from database\n    async deleteFlight(fid){\n        return await fetch(this.uri + \"/remove/\"+ fid, {\n            method:\"DELETE\",\n            mode:\"cors\"\n        }).then(response => {\n            if(!response.ok) {\n                this.handleResponseError(response);\n            }\n            return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        })\n    }\n\n    // Service method to fetch flights on source, Destination and Date\n    async getFlightsForUser(source, destination, date) {\n        return await fetch(this.uri +\n             `/fetch?source=${source}&destination=${destination}&date=${date}`)\n        .then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"flights data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}