{"ast":null,"code":"/**\n * @author Vikrant\n * Using inbuilt fetch API to send request to spring boot and fetch response\n * The service method handles CRUD opertion\n */\nexport default class FlightServiceRest {\n  constructor() {\n    this.uri = \"http://localhost:8980/flight\";\n    this.flights = [];\n  } // Service method to fetch all flights\n\n\n  async getFlights() {\n    return await fetch(this.uri + \"/fetchall\").then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(\"flights data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to Add a new flight in the database\n\n\n  async saveFlight(flight) {\n    return await fetch(this.uri + \"/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(flight)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(error.message);\n    });\n  } // Service method to make changes in an existing flight\n\n\n  async updateFlight(flight) {\n    return await fetch(this.uri + \"/update\", {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(flight)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to remove flight from database\n\n\n  async deleteFlight(fid) {\n    return await fetch(this.uri + \"/remove/\" + fid, {\n      method: \"DELETE\",\n      mode: \"cors\"\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to fetch flights on source, Destination and Date\n\n\n  async getFlightsForUser(source, destination, date) {\n    return await fetch(this.uri + `/fetch?source=${source}&destination=${destination}&date=${date}`).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(\"flights data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/2317565/OneDrive - Cognizant/Desktop/FMS/Flight-Reservation-System-Spring-boot-React-MySql-main/BookMyFlight_UI/src/services/FlightServiceRest.js"],"names":["FlightServiceRest","constructor","uri","flights","getFlights","fetch","then","response","ok","handleResponseError","json","data","console","log","catch","error","message","saveFlight","flight","method","mode","headers","body","JSON","stringify","updateFlight","deleteFlight","fid","getFlightsForUser","source","destination","date"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,iBAAN,CAAuB;AAClCC,EAAAA,WAAW,GAAE;AACT,SAAKC,GAAL,GAAW,8BAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACH,GAJiC,CAMlC;;;AACgB,QAAVC,UAAU,GAAG;AACf,WAAO,MAAMC,KAAK,CAAC,KAAKH,GAAL,GAAW,WAAZ,CAAL,CAA8BI,IAA9B,CAAmCC,QAAQ,IAAI;AACzD,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KALa,EAKXJ,IALW,CAKNK,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,IAA1C;AACA,aAAOA,IAAP;AACH,KARa,EAQXG,KARW,CAQLC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAcE,KAAK,CAACC,OAAhC;AACH,KAVa,CAAb;AAWJ,GAnBkC,CAqBnC;;;AACgB,QAAVC,UAAU,CAACC,MAAD,EAAS;AACpB,WAAO,MAAMb,KAAK,CAAC,KAAKH,GAAL,GAAS,MAAV,EAAkB;AAChCiB,MAAAA,MAAM,EAAC,MADyB;AAEhCC,MAAAA,IAAI,EAAC,MAF2B;AAGhCC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAHuB;AAMhCC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAN2B,KAAlB,CAAL,CAOVZ,IAPU,CAOLC,QAAQ,IAAI;AACpB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACC,KAZY,EAYVI,KAZU,CAYJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,OAAlB;AACH,KAdY,CAAb;AAeH,GAtCiC,CAwClC;;;AACkB,QAAZS,YAAY,CAACP,MAAD,EAAQ;AACtB,WAAO,MAAMb,KAAK,CAAC,KAAKH,GAAL,GAAS,SAAV,EAAqB;AACnCiB,MAAAA,MAAM,EAAC,KAD4B;AAEnCC,MAAAA,IAAI,EAAC,MAF8B;AAGnCC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAH0B;AAMnCC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAN8B,KAArB,CAAL,CAOVZ,IAPU,CAOLC,QAAQ,IAAI;AACpB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACC,KAZY,EAYVI,KAZU,CAYJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaE,KAAK,CAACC,OAA/B;AACH,KAdY,CAAb;AAeH,GAzDiC,CA2DlC;;;AACkB,QAAZU,YAAY,CAACC,GAAD,EAAK;AACnB,WAAO,MAAMtB,KAAK,CAAC,KAAKH,GAAL,GAAW,UAAX,GAAuByB,GAAxB,EAA6B;AAC3CR,MAAAA,MAAM,EAAC,QADoC;AAE3CC,MAAAA,IAAI,EAAC;AAFsC,KAA7B,CAAL,CAGVd,IAHU,CAGLC,QAAQ,IAAI;AAChB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KARY,EAQVI,KARU,CAQJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaE,KAAK,CAACC,OAA/B;AACH,KAVY,CAAb;AAWH,GAxEiC,CA0ElC;;;AACuB,QAAjBY,iBAAiB,CAACC,MAAD,EAASC,WAAT,EAAsBC,IAAtB,EAA4B;AAC/C,WAAO,MAAM1B,KAAK,CAAC,KAAKH,GAAL,GACb,iBAAgB2B,MAAO,gBAAeC,WAAY,SAAQC,IAAK,EADnD,CAAL,CAEZzB,IAFY,CAEPC,QAAQ,IAAI;AACf,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KAPa,EAOXJ,IAPW,CAONK,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,IAA1C;AACA,aAAOA,IAAP;AACH,KAVa,EAUXG,KAVW,CAULC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAcE,KAAK,CAACC,OAAhC;AACH,KAZa,CAAb;AAaJ;;AAzFkC","sourcesContent":["/**\n * @author Vikrant\n * Using inbuilt fetch API to send request to spring boot and fetch response\n * The service method handles CRUD opertion\n */\nexport default class FlightServiceRest{\n    constructor(){\n        this.uri = \"http://localhost:8980/flight\";\n        this.flights = [];\n    }\n\n    // Service method to fetch all flights\n    async getFlights() {\n        return await fetch(this.uri + \"/fetchall\").then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"flights data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n\n   // Service method to Add a new flight in the database\n   async saveFlight(flight) {\n        return await fetch(this.uri+\"/add\", {\n            method:\"POST\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(flight)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(error.message);\n        });\n    }\n\n    // Service method to make changes in an existing flight\n    async updateFlight(flight){\n        return await fetch(this.uri+\"/update\", {\n            method:\"PUT\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(flight)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        });\n    }\n\n    // Service method to remove flight from database\n    async deleteFlight(fid){\n        return await fetch(this.uri + \"/remove/\"+ fid, {\n            method:\"DELETE\",\n            mode:\"cors\"\n        }).then(response => {\n            if(!response.ok) {\n                this.handleResponseError(response);\n            }\n            return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        })\n    }\n\n    // Service method to fetch flights on source, Destination and Date\n    async getFlightsForUser(source, destination, date) {\n        return await fetch(this.uri +\n             `/fetch?source=${source}&destination=${destination}&date=${date}`)\n        .then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"flights data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n}"]},"metadata":{},"sourceType":"module"}